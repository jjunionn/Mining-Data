import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.decomposition import PCA

# ==== DATA MANUAL ====
data = {
    "UTS": [60, 70, 80, 55, 90, 65, 75, 85, 50, 95],
    "UAS": [65, 75, 70, 60, 95, 55, 80, 90, 45, 100],
    "Tugas": [70, 85, 90, 50, 95, 60, 75, 88, 40, 98],
    "Kehadiran": [80, 90, 95, 60, 100, 70, 85, 92, 55, 99],
    "Praktikum": [75, 88, 92, 58, 97, 65, 80, 90, 45, 96],
    "Status": ["Lulus", "Lulus", "Lulus", "Tidak Lulus", "Lulus",
               "Tidak Lulus", "Lulus", "Lulus", "Tidak Lulus", "Lulus"]
}

df = pd.DataFrame(data)
print(df)

# ==== PILIH ALGORITMA ====
# Decision Tree
# from sklearn.tree import DecisionTreeClassifier
# model = DecisionTreeClassifier(random_state=42)

# KNN
# from sklearn.neighbors import KNeighborsClassifier
# model = KNeighborsClassifier(n_neighbors=5)

# Random Forest
# from sklearn.ensemble import RandomForestClassifier
# model = RandomForestClassifier(n_estimators=100, random_state=42)

# Naive Bayes
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()

# Logistic Regression
# from sklearn.linear_model import LogisticRegression
# model = LogisticRegression(max_iter=1000)

# SVM
# from sklearn.svm import SVC
# model = SVC(kernel="linear", probability=True, random_state=42)

# ==== FITUR DAN LABEL ====
X = df[["UTS", "UAS", "Tugas", "Kehadiran", "Praktikum"]]
y = df["Status"]

# Split data 70:30
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# ==== TRAINING ====
model.fit(X_train, y_train)

# ==== PREDIKSI ====
y_pred = model.predict(X_test)

# ==== EVALUASI ====
print("\n=== Evaluasi Model ===")
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred, zero_division=0))


# ==== VISUALISASI dengan PCA ====
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

plt.figure(figsize=(8,6))
plt.scatter(
    X_pca[:,0], X_pca[:,1],
    c=(y=="Lulus").astype(int), cmap=plt.cm.Paired,
    edgecolor="k", s=80
)
plt.xlabel("PC1")
plt.ylabel("PC2")
plt.title(f"Visualisasi PCA - {type(model).__name__}")
plt.colorbar(label="Lulus (1) / Tidak Lulus (0)")
plt.show()
